package com.example.cckback.Entity;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Entity
public class Notification {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @JsonProperty("idNotification")
    private Long idNotification;

    @ManyToOne
    @JsonIgnore
    @JoinColumn(name = "utilisateur_id")
    private Utilisateur utilisateur; // The recipient (Technicien or Administrateur)
    @Column(length = 50)
    @Enumerated(EnumType.STRING)
    @JsonProperty("type")
    private NotificationType type; // Type of notification (e.g., INTERVENTION_ASSIGNED, APPOINTMENT_REMINDER)

    private String message; // The notification message
    private boolean isRead; // Whether the notification has been read
    private LocalDateTime createdAt; // When the notification was created
    private LocalDateTime readAt; // When the notification was read (nullable)

    // Optional references to related entities
    @ManyToOne
    @JoinColumn(name = "intervention_id", nullable = true)
    private Intervention intervention;

    @ManyToOne
    @JoinColumn(name = "rendezvous_id", nullable = true)
    private RendezVous rendezVous;

    @ManyToOne
    @JoinColumn(name = "alerte_id", nullable = true)
    private Alerte alerte;



    public enum NotificationType {
        // Technician notifications
        INTERVENTION_ASSIGNED,           // Assigned to an intervention
        APPOINTMENT_ASSIGNED,           // Assigned to an appointment
        APPOINTMENT_REMINDER,           // Reminder for an upcoming appointment
        INTERVENTION_PENDING,           // Intervention still unresolved

        // Admin notifications
        INTERVENTION_COMPLETED,         // Intervention completed by technician
        NEW_ALERT_GENERATED,            // New alert generated by a sensor
        HIGH_PRIORITY_ALERT  ,
        TECHNICIAN_REGISTRATION,

    }

    @PrePersist
    public void prePersist() {
        if (createdAt == null) {
            createdAt = LocalDateTime.now();
        }
    }

    public void markAsRead() {
        this.isRead = true;
        this.readAt = LocalDateTime.now();
    }

    public boolean isRead() {
        return isRead;
    }

    public void setIdNotification(Long idNotification) {
        this.idNotification = idNotification;
    }

    public void setRead(boolean read) {
        this.isRead = read;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getReadAt() {
        return readAt;
    }

    public void setType(NotificationType type) {
        this.type = type;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public void setIntervention(Intervention intervention) {
        this.intervention = intervention;
    }

    public void setRendezVous(RendezVous rendezVous) {
        this.rendezVous = rendezVous;
    }

    public void setAlerte(Alerte alerte) {
        this.alerte = alerte;
    }

    public void setUtilisateur(Utilisateur utilisateur) {
        this.utilisateur = utilisateur;
    }

    public Utilisateur getUtilisateur() {
        return utilisateur;
    }

    public String getMessage() {
        return message;
    }
}